# Проектная работа <br> Рынок заведений общественного питания Москвы

<a name="1common."></a>
**Содержание:**
* [0. Описание проекта, описание данных.](#0.)
* [1. Чтение файла с данными и изучиние общей информации.](#1.)
     - [1.1. Импорт необходомых библиотек.](#1.1.)
     - [1.2. Чтение файла и общей информации.](#1.2.)
* [2. Предработка данных](#2.)
     - [2.1. Поиск дубликатов и пропусков..](#2.1.)
     - [2.2. Создание вспомагательных столбцов..](#2.2.)
     - [2.3. .](#2.3.)
* [3. Анализ данных](#3.)
* [4. Детализация исследования](#4.)
* [5. Презентация.](#5.)
* [6. Вывод.](#6.)

# Описание проекта<a name="0."></a>
[<font size="2">(к содержанию)</font>](#1common.)

  Инвесторы из фонда «Shut Up and Take My Money» решили попробовать себя в новой области и открыть заведение общественного питания в Москве. Заказчики ещё не знают, что это будет за место: кафе, ресторан, пиццерия, паб или бар, — и какими будут расположение, меню и цены.

  Для начала они просят вас — аналитика — подготовить исследование рынка Москвы, найти интересные особенности и презентовать полученные результаты, которые в будущем помогут в выборе подходящего инвесторам места.

  Постарайтесь сделать презентацию информативной и лаконичной. Её структура и оформление сильно влияют на восприятие информации читателями вашего исследования. Выбирать инструменты (matplotlib, seaborn и другие) и типы визуализаций вы можете самостоятельно.

  Вам доступен датасет с заведениями общественного питания Москвы, составленный на основе данных сервисов Яндекс Карты и Яндекс Бизнес на лето 2022 года. Информация, размещённая в сервисе Яндекс Бизнес, могла быть добавлена пользователями или найдена в общедоступных источниках. Она носит исключительно справочный характер.

# Описание данных<a name="0."></a>
[<font size="2">(к содержанию)</font>](#1common.)

* <b>name</b> — название заведения;
* <b>address</b> — адрес заведения;
* <b>category</b> — категория заведения, например «кафе», «пиццерия» или «кофейня»;
* <b>hours</b> — информация о днях и часах работы;
* <b>lat</b> — широта географической точки, в которой находится заведение;
* <b>lng</b> — долгота географической точки, в которой находится заведение;
* <b>rating</b> — рейтинг заведения по оценкам пользователей в Яндекс Картах (высшая оценка — 5.0);
* <b>price</b> — категория цен в заведении, например «средние», «ниже среднего», «выше среднего» и так далее;
* <b>avg_bill</b> — строка, которая хранит среднюю стоимость заказа в виде диапазона;
* <b>middle_avg_bill</b> — число с оценкой среднего чека, которое указано только для значений из столбца avg_bill;
* <b>middle_coffee_cup</b> — число с оценкой одной чашки капучино, которое указано только для значений из столбца avg_bill;
* <b>chain</b> — число, выраженное 0 или 1, которое показывает, является ли заведение сетевым (для маленьких сетей могут встречаться ошибки):
* <b>district</b> — дминистративный район, в котором находится заведение, например Центральный административный округ;
* <b>seats</b> — количество посадочных мест;

<a name="1."></a><br/>
<font size="5"><b>1. Ознакомление с данными</b>:<br/></font>
[<font size="2">(к содержанию)</font>](#1common.)

<a name="1.1."></a><br/>
<font size="3"><b> 1.1 Импорт необходомых библиотек</b> <br/></font>
[<font size="2">(к содержанию)</font>](#1common.)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objs as go


from pandas.plotting import register_matplotlib_converters
import warnings
# конвертеры, которые позволяют использовать типы pandas в matplotlib  
register_matplotlib_converters()

#для размещения графиков посередины страницы
from IPython.core.display import HTML as Center

Center(""" <style>
.output_png {
    display: table-cell;
    text-align: center;
    vertical-align: middle;
}
</style> """)

pd.set_option('max_columns', None)

<a name="1.2."></a><br/>
<font size="3"><b> 1.2 Чтение файла и общей информации</b><br/></font>
[<font size="2">(к содержанию)</font>](#1common.)

try:
    df = pd.read_csv('/datasets/moscow_places.csv')
except:
    df = pd.read_csv('https://code.s3.yandex.net/datasets/moscow_places.csv')

df.head(100)

# display of general data information
df.info() 

<a name="2."></a><br/>
<font size="5"><b>2. Предработка данных </b>:<br/></font>
[<font size="2">(к содержанию)</font>](#1common.)

<a name="2.1."></a><br/>
<font size="3"><b>2.1 Поиск дубликатов и пропусков.</b><br/></font>
[<font size="2">(к содержанию)</font>](#1common.)

df.duplicated().sum() #number of duplicated rows

> **Дубликаты отсутствуют.**

df.isna().sum() #number of empty rows

>**Пропусков в некоторых столбцах больше 90%, но так как не сильно влияют на результаты иследования решено оставить без изменений.**

<a name="2.2."></a><br/>
<font size="3"><b>2.2 Создание вспомагательных столбцов.</b><br/></font>
[<font size="2">(к содержанию)</font>](#1common.)

df['street_name'] = df['address'].apply(lambda x: str(x).split(', ')[1]) #creating new row with street names

df['street_name'].unique() #showig unique values

def round_the_clock (row):
    
    if row == 'круглосуточно':
        return True
    else:
        return False

df['24/7'] = df['hours'].apply(round_the_clock)



<a name="3."></a><br/>
<font size="5"><b>3. Анализ данных</b>:<br/></font>
[<font size="2">(к содержанию)</font>](#1common.)

- Какие категории заведений представлены в данных? Исследуйте количество объектов общественного питания по категориям: рестораны, кофейни, пиццерии, бары и так далее. Постройте визуализации. Ответьте на вопрос о распределении заведений по категориям.

categoties = (df
           .pivot_table(
                        index='category',
                        values='name',
                        aggfunc='count')
                .rename(columns={'category': 'category', 'name': 'number'})
               )

def percent(num):
     return "{0:.2%}".format(num) 
    
categoties['category_share'] = (categoties['number'] / categoties['number'].sum()).apply(percent)


categoties.sort_values(by='number', ascending=False)

category = df.groupby('category')[['name']].count().reset_index()


plt.figure(figsize=(16, 9))
ax = sns.barplot(x='category', y='name', data=category, palette='PuBu')


for x, y in category.iterrows():
    ax.text(x, y[1]+50, str(y[1]), ha='center')
        

plt.title('Распределение по категориям',fontsize = 20, loc='left')
plt.xlabel(' ', fontsize = 15)
plt.xticks(rotation=30)
plt.ylabel('Количество', fontsize = 15)
plt.grid(True)
plt.show()

> **Как видно на графике кафе и рестораны переобладают, а вот булочных почти в 9 раз меньше кафе.**

- Исследуйте количество посадочных мест в местах по категориям: рестораны, кофейни, пиццерии, бары и так далее. Постройте визуализации. Проанализируйте результаты и сделайте выводы.

plt.figure(figsize=(12, 5))
plt.title('Количество посадочных мест в разрезе категорий', fontsize = 20, loc='left')
sns.boxplot(data=df, x="category", y="seats", palette='PuBu')
plt.grid(True)
plt.xlabel('Название категорий', fontsize = 15)
plt.ylabel('Кол-во мест', fontsize = 15)
plt.show()


plt.figure(figsize=(12, 5))
plt.title('Количество посадочных мест в разрезе категорий', fontsize = 20, loc='left')
sns.boxplot(data=df, x="category", y="seats", palette='PuBu')
plt.ylim(0, 350)
plt.grid(True)
plt.xlabel('Название категорий', fontsize = 15)
plt.ylabel('Кол-во мест', fontsize = 15)
plt.show()



>**Распределение посадочных мест по категориям распределн не равномерно, судя по графику видны большие "усы" поэтому решил посчитать медианное значение.**

avg_seats = (df
           .pivot_table(
                        index='category',                        
                        values='seats',
                        aggfunc='median')
                .rename(columns={'category': 'category', 'seats': 'median'})
               )


avg_seats.sort_values(by='median', ascending=False)


mean_number = df.groupby('category').agg({'seats':'median'}).reset_index().round()
fig = go.Figure(data=[go.Bar(x = mean_number['category'],
                             y = mean_number['seats'],
                             text= mean_number['seats'],
                             textposition = 'outside', name='category'                             
                             )])
fig.update_layout(title_text='Среднее кол-во посадочных мест по виду заведений по всей Москве')
fig.show()

>**В целом ожидаемо так как в ресторанах обычно проводят мероприятии с большим количеством людей по типу свадеб конечно если это ресторан не Мак-дак.**

 - Рассмотрите и изобразите соотношение сетевых и несетевых заведений в датасете. Каких заведений больше?

new_data = df[['category', 'chain']]

plt.figure(figsize=(16,9))

sns.histplot(
                data=new_data, 
                y='category', 
                hue='chain', 
                multiple='fill',
                element='bars',
                shrink=0.8, 
                palette='PuBu',
                legend=True,
                stat='percent'
)
plt.title('Сетевые и несетевые заведений в категории', fontsize = 20, loc='left')
plt.xlabel('Доля', fontsize = 15)
plt.ylabel('Категория', fontsize = 15);


chain_category = df.pivot_table(index='category',
               columns='chain',
               values='name',
               aggfunc='count').rename(columns=({0: 'chain', 1: 'non_chain'}))

def percent(num):
     return "{0:.2%}".format(num) 
    
chain_category['chain_share'] = (chain_category['chain'] / df.groupby(by='category')['chain'].count()).apply(percent)
chain_category['non_chain_share'] = (chain_category['non_chain'] / df.groupby(by='category')['chain'].count()).apply(percent)

def swap_columns (df, col1, col2):
 col_list = list(df.columns )
 x, y = col_list. index (col1), col_list. index (col2)
 col_list[y], col_list[x] = col_list[x], col_list[y]
 df = df[col_list]
 return df

chain_category = swap_columns (chain_category, 'chain_share', 'non_chain')


chain_category.sort_values(by='chain_share', ascending=False)
               

>**Доля сетевых баров и столовых внутри группы высокая, а по абсолютному значению кафе и ресторанам нет равных.**

 - Сгруппируйте данные по названиям заведений и найдите топ-15 популярных сетей в Москве. Под популярностью понимается количество заведений этой сети в регионе. Постройте подходящую для такой информации визуализацию. Знакомы ли вам эти сети? Есть ли какой-то признак, который их объединяет? К какой категории заведений они относятся?

top_15_chain = (
    df.query('chain == 1').pivot_table(
        index=["category", "name"],
        
        values=["chain"], 
        aggfunc="count")).sort_index(level=[1,1], ascending=[1,0]).sort_values(by='chain', ascending=False).head(15)

top_15_chain.sort_index(level=[0,1], ascending=[0,0])

- Какие административные районы Москвы присутствуют в датасете? Отобразите общее количество заведений и количество заведений каждой категории по районам. Попробуйте проиллюстрировать эту информацию одним графиком.

top_10 = (df
          .groupby(['district', 'category'])
          .agg({'name':'count'})
          .sort_values(by='name', ascending=False).head(100)
          .reset_index()
         )
top_10

df['district'].unique()



street = df['district'].to_list()

fig = go.Figure(data=[
    go.Bar(name='Кафе', x=street, y=[98, 56, 41, 60, 55, 44, 11, 39, 43, 45]),
    go.Bar(name='Бар', x=street, y=[5, 5, 14, 5, 2, 6, 2, 7, 15]),
    go.Bar(name='Буфет', x=street, y=[1, 0, 2, 0, 1, 0, 1, 3, 1]),
    go.Bar(name='Закусочная', x=street, y=[0, 0, 2, 0, 0, 0, 4, 0, 2]),
    go.Bar(name='Кафетерий', x=street, y=[5, 6, 1, 1, 1, 0, 2, 1, 3, 9]),
    go.Bar(name='Магазин(отдел кулинарии)', x=street, y=[0, 0, 1, 3, 0, 0, 3, 1, 1]),
    go.Bar(name='ПБО', x=street, y=[18, 3, 3, 8, 19, 0, 33, 6, 0, 8]),
    go.Bar(name='Ресторан', x=street, y=[40, 31, 28, 5, 3, 29, 18, 20, 12, 10]),
    go.Bar(name='Столовая', x=street, y=[0, 1, 0, 3, 1, 0, 5, 0, 0, 0], text= top_10['name'], textposition='outside')
])
fig.update_layout(title_text='Соотношение типов заведений по улицам, список топ-10 входящих в один район')
fig.update_layout(barmode='stack')
fig.show()

pip install folium

# импортируем карту и маркер
from folium import Map, Marker
# импортируем кластер
from folium.plugins import MarkerCluster

# moscow_lat - широта центра Москвы, moscow_lng - долгота центра Москвы
moscow_lat, moscow_lng = 55.751244, 37.618423

# создаём карту Москвы
m = Map(location=[moscow_lat, moscow_lng], zoom_start=10)
# создаём пустой кластер, добавляем его на карту
marker_cluster = MarkerCluster().add_to(m)

# пишем функцию, которая принимает строку датафрейма,
# создаёт маркер в текущей точке и добавляет его в кластер marker_cluster
def create_clusters(row):
    Marker(
        [row['lat'], row['lng']],
        popup=f"{row['name']} {row['rating']}",
    ).add_to(marker_cluster)

# применяем функцию create_clusters() к каждой строке датафрейма
df.apply(create_clusters, axis=1)

# выводим карту
m

top_10 = df.groupby(['district']).agg({'name':'count'}).sort_values(by='name', ascending=False).head(100).reset_index()
top_10

fig = go.Figure(data=[go.Bar(x = df['district'],
                             y = df['category'],
                             text= df['category'],
                             textposition = 'outside',                            
                             )])
fig.update_layout(title_text='Кол-во заведений по топ-10 улиц входящими в один район')
fig.show()

street = top_10['street_name'].to_list()

fig = go.Figure(data=[
    go.Bar(name='Кафе', x=street, y=[98, 56, 41, 60, 55, 44, 11, 39, 43, 45]),
    go.Bar(name='Бар', x=street, y=[5, 5, 14, 5, 2, 6, 2, 7, 15]),
    go.Bar(name='Буфет', x=street, y=[1, 0, 2, 0, 1, 0, 1, 3, 1]),
    go.Bar(name='Закусочная', x=street, y=[0, 0, 2, 0, 0, 0, 4, 0, 2]),
    go.Bar(name='Кафетерий', x=street, y=[5, 6, 1, 1, 1, 0, 2, 1, 3, 9]),
    go.Bar(name='Магазин(отдел кулинарии)', x=street, y=[0, 0, 1, 3, 0, 0, 3, 1, 1]),
    go.Bar(name='ПБО', x=street, y=[18, 3, 3, 8, 19, 0, 33, 6, 0, 8]),
    go.Bar(name='Ресторан', x=street, y=[40, 31, 28, 5, 3, 29, 18, 20, 12, 10]),
    go.Bar(name='Столовая', x=street, y=[0, 1, 0, 3, 1, 0, 5, 0, 0, 0], text= top_10['name'], textposition='outside')
])
fig.update_layout(title_text='Соотношение типов заведений по улицам, список топ-10 входящих в один район')
fig.update_layout(barmode='stack')
fig.show()





<a name="4."></a><br/>
<font size="5"><b>4. Детализация исследования</b>:<br/></font>
[<font size="2">(к содержанию)</font>](#1common.)







<a name="5."></a><br/>
<font size="5"><b>5. Презентация</b>:<br/></font>
[<font size="2">(к содержанию)</font>](#1common.)







<a name="6."></a><br/>
<font size="5"><b>6. Выводы</b>:<br/></font>
[<font size="2">(к содержанию)</font>](#1common.)



